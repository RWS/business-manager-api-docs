{
  "README.html": {
    "href": "README.html",
    "title": "business-manager-api-docs",
    "summary": "business-manager-api-docs What is it? This the main repository for the Trados Business Manager Public API documentation. Can I contribute? Anyone is welcome to contribute to the public Trados Business Manager API documentation by making a pull request into the master repository. The documentation is split into the following sections: Articles This section hosts a series of usefull article on: how to get started with writing plug-ins for Trados Business Manager how to best use the public APIs how to troubleshoot common issues API Concepts This section hosts the main guidelines on using the Public API along with the API References Getting started with your contribution The documentation is built using a static documentation generator called DocFX. The documentation content is saved in Markdown files and then built into a website using DocFX. The table of content is saved into separate toc.yml files. In order for you to make a contribution directly please follow the next steps: Create a local branch from the main repository Add your changes by modifying existing Markdown files or by adding new Markdown files Adding new files will require updating the toc.yml files. Use the guideline provided by DocFX to learn more. You can use tools such as Notepad++ or Visual Studio Code to edit the content Create a Pull Request with your changes. This pull request will be reviewed for correctness by one of our technical writers Once your pull request has been approved and committed into the main branch, an automatic pipeline will be triggered which will push your changes to the live documentation site if you wish to test your changes locally you can follow the DOCFX Installation guideline and build the entire solution locally Our documentation automatically fills in the product name and other details so you don't have to make the changes manually if we decide to update the product name. Use the 'var:VariableName' construct to tell our documentation engine to fill in the info for you. Here are the constructs available at this point: Var:ProductName - The product name, for example Trados Business Manager Var:ProductNameWithEdition - The official product release name including the edition, for example 'Trados Business Manager 2021'"
  },
  "apiconcepts/authorization.html": {
    "href": "apiconcepts/authorization.html",
    "title": "Authorization",
    "summary": "Authorization In order to send requests to the TBM API, you have to retrieve a token and include it in the header of all API requests. Token can be retrieved by sending POST request to the following endpoint: https://{API_URL}/Logon with the following body: { \"tenant\": \"TBM\", \"userName\": \"Admin\", \"userPassword\": \"Your_Password\" } If specified credentials are valid, a server will return you a token: { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiQWRtaW4iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJUQk0iLCJuYmYiOjE2MzMwODExNjMsImV4cCI6MTYzNTY3MzE2MywiaXNzIjoiTXlBdXRoU2VydmVyIiwiYXVkIjoiTXlBdXRoQ2xpZW50In0.kLWE3QxZCDsuhHCf8JJq1CzZ1E867GYNFz1pwaenapg\", \"username\": \"Admin\" } You can save this token and add it to the Authorization header in the form of \"Bearer\" word followed by your token after space, like this: Bearer your_token Take a note that when you login with some user and password, it will affect on results of all operation you perform via API. This means that if you login with a user with limited access rights, then API won't allow you to read or write beyond allowed boundaries. To test this, you can create few users via TBM UI, limit access for second user, and then try to send login requests via API for these users. After that, try to send GET requests to retrieve list of entities where you have set limited access - you will notice that one user receives more data than the other. Code examples Here you will find few code examples written in C# demonstrating how to authorize in API. Sending Logon request var client = new RestClient(\"https://localhost:44334/Logon\"); var request = new RestRequest(Method.POST); var body = JsonConverter.SerializeObject(logonModel); request.AddParameter(\"application/json\", body, ParameterType.RequestBody); IRestResponse response = client.Execute(request); Console.WriteLine(response.Content); Sending GET request with Bearer token var client = new RestClient(\"https://localhost:44334/Unit\"); var request = new RestRequest(Method.GET); request.AddHeader(\"Authorization\", \"Bearer your_token\"); IRestResponse response = client.Execute(request); Console.WriteLine(response.Content);"
  },
  "apiconcepts/creating_project.html": {
    "href": "apiconcepts/creating_project.html",
    "title": "How to create a project using API",
    "summary": "How to create a project using API In previous article, we retrieved data from TBM database. Now, let's demonstrate how create data. The approach here is the same as for retrieving data, but instead of GET method we will use POST method. First of all, expand Translation project group and find an endpoint to create a project: For example, you're going to read simple list of Units. Let's expand Unit group and find endpoint which allows to read list of units: In the same manner as for units, let's create a model class for translation project: public class TranslationProjectDtoEdit : BaseDtoEdit { public int? DocNum {get; set; } public DateTime? Date { get; set; } public DateTime? Term { get; set; } public TranslationProjectStatus? Status { get; set; } public string ProjectName { get; set; } public string Description { get; set; } public Guid? SourceLanguageId { get; set; } public Guid? CustomerId { get; set; } public Guid? CustomerContactId { get; set; } public Guid? PriceListId { get; set; } public string PONumber { get; set; } public Guid? ResponsiblePersonId { get; set; } public Guid? SpecializationId { get; set; } public string Instructions { get; set; } public Guid? FuzzySchemeId { get; set; } public Guid? QuoteId { get; set; } public string Folder { get; set; } public bool? FolderFixed { get; set; } public TimeSpan? EditTime { get; set; } public Guid? WorkflowId { get; set; } public Guid? AnalysisImportSettingsId { get; set; } public string GroupShareId { get; set; } public string TradosProjectId { get; set; } public string TradosProjectFilePath { get; set; } public bool? IncludeInCV { get; set; } public List<Guid> TargetLanguages { get; set; } public List<DocumentChecklistItemDtoEdit> ChecklistItems { get; set; } } Now we can use this class to create a project: var client = new RestClient(\"https://localhost:44334/DocTranslationProject\"); var request = new RestRequest(Method.POST); request.AddHeader(\"Authorization\", \"Bearer your_token\"); var projectModel = new TranslationProjectDtoEdit(); projectModel.Date = new DateTime(2021, 10, 01); projectModel.Term = new DateTime(2021, 10, 11); projectModel.ProjectName = \"New project\"; projectModel.description = \"Some test project\"; projectModel.sourceLanguageId = Guid.Parse(\"40cb29da-500a-4875-9e12-990ae5e24c14\"); projectModel.customerId = Guid.Parse(\"7bab4343-70c2-46ec-972f-3ddd94132271\"); projectModel.poNumber = \"PO-123-3344\"; projectModel.instructions = \"Some instructions\"; projectModel.TargetLanguages = new List<Guid>(); projectModel.TargetLanguages.Add(Guid.Parse(\"312e2dd1-9b52-41b3-bc5e-154d4054fb85\")); projectModel.TargetLanguages.Add(Guid.Parse(\"d86487b1-2eaa-4e5f-8371-684a128e84a8\")); projectModel.TargetLanguages.Add(Guid.Parse(\"cd87fc65-6816-4bf6-8cf8-6610525d0560\")); request.AddParameter(\"application/json\", JsonConvert.SerializeObject(projectModel), ParameterType.RequestBody); IRestResponse response = client.Execute(request); Console.WriteLine(response.Content); Guids used in the example above can be retrieved by sending corresponding GET requests to the Languages and Customers endpoints. If reponse status code is 201, then you can deserialize it and retrieve ID of a created project. This ID can then be used to upload files, for example, or create jobs."
  },
  "apiconcepts/getting_data.html": {
    "href": "apiconcepts/getting_data.html",
    "title": "How to read data using API",
    "summary": "How to read data using API First of all, it is recommended to open API documentation (via URL where you have installed API website, or using example API website: https://api.ibaccs.com). In the list you can find a lot of endpoints supported by API. Eech endpoint has a label identifying type of request which should be send to that endpoint. GET requests are used only to read data, while POST requests allow to create data, PATCH - to edit data, and DELETE - to delete data. In this article, we're going to descirbe GET requests. For example, you're going to read simple list of Units. Let's expand Unit group and find endpoint which allows to read list of units: In the Example value group you can see the structure of returned rows. If you switch to the Model tab, you will find detailed description of fields of the Units table: By following this model, you can re-create a class in your application for de-serialization of the Unit objects. It could look like this: public class UnitDto { [Description(\"Record ID\")] public Guid Id { get; set; } [Description(\"Unit name\")] public string Name { get; set; } public string NameL1 { get; set; } public string NameL2 { get; set; } public string NameL3 { get; set; } public decimal AdjustmentFactor { get; set; } public bool IsTime { get; set; } public bool FlatRate { get; set; } public UnitDtoLite BaseUnit { get; set; } [Description(\"Unit weights\")] public List<UnitWeightItemDto> UnitWeights { get; set; } } public class UnitDtoLite { [Description(\"Record ID\")] public Guid Id { get; set; } [Description(\"Unit name\")] public string Name { get; set; } } public class UnitWeightItemDto { [Description(\"Record ID\")] public Guid Id { get; set; } [Description(\"Unit\")] public UnitDtoLite Unit { get; set; } [Description(\"Service type\")] public ServiceTypeDtoLite ServiceType { get; set; } [Description(\"Fuzzy weight\")] public decimal AdjustmentFactor { get; set; } } Now, when you have necessary classes and access token, you can send a request and get de-serializaed list of units: var client = new RestClient(\"https://localhost:44334/Unit\"); var request = new RestRequest(Method.GET); request.AddHeader(\"Authorization\", \"Bearer your_token\"); IRestResponse response = client.Execute(request); try { var units = JsonConvert.DeserializeObject<UnitDto[]>(response); } catch(Exception e) { ... } In the same manner, you can create model classes for other entities (for example, translation job has much more fields, so it won't be a quick job), and use them to retrieve data from other endpoints."
  },
  "apiconcepts/overview.html": {
    "href": "apiconcepts/overview.html",
    "title": "Trados Business Manager API Documentation",
    "summary": "Trados Business Manager API Documentation Introduction Trados Business Manager (TBM) allows you to use the API to manipulate its data. The API covers all the tables existing in the TBM database from reference data, to all documents. In general, using the API you can create, edit and delete any data contained in your TBM instance. Some functionalities may be missing in API (for example, retrieving a list of recommended vendors in a new translation assignment). We'll be extending the API capabilities by adding more endpoints with time. You can use the \"Improve this Doc\" feature on this page to submit a pull request with any suggested changes, and you can also use the RWS Community forums. Guide to using the Trados Business Manager API You can find a useful introduction to the TBM API in the RWS Community here: https://community.sdl.com/product-groups/translationproductivity/business-manager/w/wiki/5916/api Where to find the API Documentation The API has to be installed separately on your server as it is not delivered with the main TBM application. It's also only available with the Team and Enterprise editions of TBM from version 6 onwards. You'll find some information about how to install and configure the application in this wiki article in the RWS Community. Exploring the Swagger Interface You can explore the available endpoints using the Trados Business Manager API documentation available here: https://api.ibaccs.com Video Tutorial You can also find a useful video demonstrating how to use the TBM API capabilities to create custom tools for manipulating data stored in the TBM database:"
  },
  "apiconcepts/postman.html": {
    "href": "apiconcepts/postman.html",
    "title": "Postman - usage and helper library download",
    "summary": "Postman - usage and helper library download Postman (https://www.postman.com/) is a great tool used by many API developers and users to test and use APIs. It provides a lot of possibilities to automate things and make API usage much easier. To make it easier for your to start with TBM API, we have created a library for postman, which contains a lot of sample API calls, from reading simple lists, to creating projects, uploading files and deleting temporarily created data. You can download zip file by clicking here. Then, extract zip archive, run Postman and select File > Import to load json file. In the result, you should get the following tree: You can start with Logon > Logon item, which allows to get a token to access library. When you open this request, you will find that URL contains {{baseUri}} variable: You have to fill this variable in the variable list, and your URL will be correctly applied to all requests contained in the library: Then, fill correct user name and password in the request body and send the request. In the result you will get a response with access token: Nice part here is that you don't have to copy this access token manually and paste it somewhere. It will be saved automatically and attached to all your future requests. For this, {{access_token }} variable will be used. So, if logon request was successful, you can move to any other requests contained in the library, and it will be processed correctly from a currently logged in user."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to the Var:ProductName API documentation.",
    "summary": "Welcome to the Var:ProductName API documentation. Here you’ll find all the information you need to get started developing your own Var:ProductName plugin. Discover quick guides explaining how to build, develop and deploy your app, plus hints and tips to help you make the most of our APIs. Should you have any ideas as to how we can improve this documentation, any new topics you think we should include or hints and tips you would like to share with the developer community, please let us know. To let us know what your suggested improvements are you can do this by using the \"Improve this Doc\" link on the top right of every page. You will need your own github account for this because this action will create a fork of the repository in your account where you can make the changes and then submit a pull request for us to review and accept. Good luck and happy developing!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Access the Var:ProductName APIs",
    "summary": "Access the Var:ProductName APIs Learn more about Var:ProductNameWithEdition APIs Learn more about the APIs and what you can achieve with them. Articles Read articles on how to get more out of Var:ProductName."
  }
}